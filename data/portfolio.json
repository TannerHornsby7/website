{
    "education": [
      {
        "school": "University of Chicago",
        "degree": "B.S. Computer Science",
        "date": "2020 - 2024",
        "details": "Focused on systems programming and machine learning. Coursework includes Computer Architecture, Machine Learning, and Machine Learning for Computer Systems."
      }
    ],
    "work": [
      {
        "company": "Edovo",
        "role": "Software Engineer Intern",
        "date": "2023",
        "description": "Built educational software for incarcerated individuals, focusing on offline-first architecture and secure content delivery. Developed a Java service which streamed batches of updates from our SQL database to sumo logic, making it easy for developers to run complex queries on our data. Created a customer facing full-stack resume builder, using React, TailwindCSS, and Java."
      },
      {
        "company": "Data for Common Good",
        "role": "Data Science Intern",
        "date": "2022",
        "description": "Developed a feedback collection system for the patient trial matching program using Postgres and FastAPI."
      },
      {
        "company": "Hohonu",
        "role": "Software Engineer Intern",
        "date": "2021",
        "description": "Developed real-time water level monitoring systems using IoT sensors. Integrated data from custom pipeline to detect anomalies in water levels, utilized harmonic regression to predict water levels."
      }
    ],
    "projects": [
      {
        "name": "Ouradio",
        "date": "2023 - Present",
        "description": "A collaborative radio platform that enables shared music experiences. Built with Next.js and WebRTC, featuring real-time synchronization and social features that create a unique listening experience.",
        "tech": ["Next.js", "WebRTC", "TypeScript", "TailwindCSS"]
      },
      {
        "name": "ARMv8 Simulator",
        "date": "2022",
        "description": "Developed an instruction-level simulator for a subset of the ARMv8 instruction set (a RISC style ISA). Added out of order pipelined execution, an LRU L1 cache and write through L2 cache for faster memory operations, and branch prediction using 2 tier branch history table with the 2-bit saturating counter heuristic. ",
        "tech": ["C", "RISC", "ARMv8", "Git"]
      },
      {
        "name": "CrustyDB",
        "date": "2021",
        "description": "Created a SQL database management system in Rust, implementing a B-Tree as the database file format, implementing the Volcano Model for query processing, and a Lock Manager for concurrency control.",
        "tech": ["Rust", "SQL", "Git"]
      }
    ],
    "skills": {
      "languages": ["Javascript", "TypeScript", "Python", "Rust", "C/C++", "SQL"],
      "frontend": ["React", "Next.js", "TailwindCSS", "HTML/CSS"],
      "backend": ["Node.js", "Flask", "FastAPI", "GraphQL"],
      "databases": ["PostgreSQL", "DynamoDB", "Redis", "MongoDB"],
      "cloud": ["AWS", "GCP", "Docker", "Terraform"],
      "ml": ["PyTorch", "TensorFlow", "scikit-learn", "NumPy", "Pandas"],
      "tools": ["Git", "Linux", "Vim", "VSCode", "Postman"]
    }
}